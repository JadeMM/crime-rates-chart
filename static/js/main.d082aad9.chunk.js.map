{"version":3,"sources":["components/data/data.csv","components/KeyCheckboxes.js","components/DonutChart.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","KeyCheckboxes","props","showKeys","map","item","i","class","key","district","type","id","checked","onChange","e","handleChange","htmlFor","DonutChart","saveData","result","data","districtCount","index","districts","setShowKeys","includes","indexOf","value","label","sort","a","b","Number","setState","alterArr","state","updateData","drawCanvas","height","width","canvas","d3","append","attr","drawKey","drawSlices","s","radius","Math","min","color","range","arc","innerRadius","outerRadius","pie","d","slice","selectAll","enter","insert","style","transition","duration","attrTween","this","_current","interpolate","t","exit","remove","keys","text","csvFilePath","require","Papa","parse","header","download","skipEmptyLines","complete","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.d082aad9.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/data.0fa7f54e.csv\";","import React from 'react';\r\n\r\nexport default function KeyCheckboxes(props) {\r\n    return (\r\n        <form>\r\n            {props.showKeys.map((item, i) => {\r\n                return (\r\n                    <span  class='checks' key={`district${item.district}`}>\r\n                        <input type='checkbox' id={`district${item.district}`}\r\n                            checked={item.checked}\r\n                            onChange={(e) => props.handleChange(e,i)}/>\r\n                        <label htmlFor={`district${item.district}`}>{`District ${item.district}`}</label>\r\n                    </span>\r\n                )\r\n            })}\r\n\r\n        </form>\r\n    )\r\n}","import React from 'react';\r\nimport * as d3 from 'd3';\r\nimport Papa from 'papaparse';\r\nimport KeyCheckboxes from './KeyCheckboxes';\r\n\r\nexport default class DonutChart extends React.Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            data : [],\r\n            districts : [],\r\n            showKeys: [],\r\n            width: 600,\r\n            height: 400,\r\n            canvas: d3.select('#canvas')\r\n        }\r\n    }\r\n\r\n    //Parse csv file\r\n    componentDidMount() {\r\n        const csvFilePath = require(\"./data/data.csv\");\r\n\r\n        Papa.parse(csvFilePath, {\r\n          header: true,\r\n          download: true,\r\n          skipEmptyLines: true,\r\n          complete: this.saveData //send data to be stored\r\n        });\r\n\r\n        this.drawCanvas();\r\n      }\r\n\r\n    //Create array with districs and crimes commited\r\n    //and array of districts and checked boolean\r\n    saveData = (result) => {\r\n        const data = [...result.data]\r\n        const districtCount = [];\r\n        let index = 0;\r\n        const districts = [];\r\n        const setShowKeys = [];\r\n\r\n        for(let item of data) {\r\n            if(!districts.includes(item.district)) {\r\n                districts[index] = item.district;\r\n                districtCount[index] = {label: item.district, value: 1}\r\n                setShowKeys[index] = {district: item.district, checked: true};\r\n                index++;\r\n            } else {\r\n                districtCount[districts.indexOf(item.district)].value++;\r\n            }\r\n        }\r\n\r\n        //Sort arrays\r\n        setShowKeys.sort((a,b) => Number(a.district) - Number(b.district));\r\n        districtCount.sort((a,b) => Number(a.label) - Number(b.label));\r\n        \r\n        this.setState({districts: districtCount});\r\n        this.setState({data: districtCount});\r\n        this.setState({showKeys: setShowKeys});\r\n    }\r\n\r\n    //Check or uncheck checkboxes and call updateData\r\n    handleChange = (e, index) => {\r\n        const alterArr = [...this.state.showKeys]\r\n        if(alterArr[index].checked) {\r\n            alterArr[index].checked = false;\r\n        } else {\r\n            alterArr[index].checked = true;\r\n        }\r\n\r\n        this.setState({showKeys: alterArr});\r\n        this.updateData(alterArr);\r\n    }\r\n    \r\n    //Put all of the data to be displayed in the data array\r\n    updateData = (showKeys) => {\r\n        const data = this.state.districts.map((item, i) => {\r\n            return this.state.showKeys[i].checked ? item : {label: item.district, value: 0};\r\n        })\r\n\r\n        this.setState({data: data});\r\n    }\r\n\r\n    //Draw blank canvas\r\n    drawCanvas = () => {\r\n        const {height, width} = this.state;\r\n\r\n        const canvas = d3.select('#canvas')\r\n            .append('svg')\r\n            .attr('width', width)\r\n            .attr('height', height)\r\n            .append('g')\r\n                .attr('transform', `translate(${width / 2}, ${height / 2})`);\r\n\r\n        this.setState({canvas: canvas});\r\n        this.drawKey(canvas);\r\n    }\r\n\r\n    //Draw and update pie chart slices\r\n    drawSlices = (s) => {\r\n        const {height, width, canvas, data} = this.state;\r\n        const radius = Math.min(height, width) / 2;\r\n\r\n        const color = d3.scaleOrdinal().range([\"#A7226E\", \"#EC2049\",\"#F26B38\", \"#cc3300\", \"#F7DB4F\", \"#2F9599\"]);\r\n        \r\n        const arc = d3.arc()\r\n            .innerRadius(radius * 0.5)\r\n            .outerRadius(radius);\r\n\r\n        const pie = d3.pie()\r\n            .value(function (d) {\r\n                return d.value;\r\n            })\r\n            .sort(null);\r\n        \r\n        const slice = canvas.selectAll(\"path\")\r\n            .data(pie(data)); \r\n\r\n        slice.enter()\r\n                .insert('path')\r\n                .attr('d', arc)\r\n                .style('fill', (d,i) => color(i))\r\n\r\n        slice.transition().duration(1000)\r\n            .attrTween(\"d\", function (d) {\r\n                this._current = this._current || d;\r\n                var interpolate = d3.interpolate(this._current, d);\r\n                this._current = interpolate(0);\r\n                return function (t) {\r\n                    return arc(interpolate(t));\r\n                };\r\n            })\r\n\r\n\t\tslice.exit()\r\n\t\t\t.remove();\r\n    }\r\n\r\n    //Draw key for districts\r\n    drawKey = (canvas) => {\r\n        const {height, width} = this.state;\r\n        \r\n        const color = d3.scaleOrdinal().range([\"#A7226E\", \"#EC2049\",\"#F26B38\", \"#cc3300\", \"#F7DB4F\", \"#2F9599\"]);\r\n        const keys = [1,2,3,4,5,6];\r\n\r\n        const squares = canvas.selectAll(\"circle\")\r\n            .data(keys); \r\n\r\n        //Color square\r\n        squares.enter()\r\n                .append('circle')\r\n                .attr(\"r\", 6)\r\n                .attr('cx', -35)\r\n                .attr('cy', d => d*20 - 70)\r\n                .style('fill', (d,i) => color(i))\r\n        \r\n        //Text\r\n        canvas.selectAll(\"text\")\r\n            .data(keys)\r\n            .enter()\r\n                .append(\"text\")\r\n                .text(d => `District ${d}`)\r\n                .attr(\"x\", -20)\r\n                .attr(\"y\", (d, i) => (d * 20) -64)\r\n    }\r\n\r\n    render() {\r\n        this.drawSlices();\r\n        return (\r\n            <div class='container'>\r\n                <h3>Sacremento Crime Rates by District - 2006</h3>\r\n                <div id='canvas'/>\r\n                <KeyCheckboxes showKeys={this.state.showKeys} handleChange={this.handleChange}/>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport DonutChart from './components/DonutChart';\n\nfunction App() {\n  return (\n    <div>\n      <DonutChart/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}